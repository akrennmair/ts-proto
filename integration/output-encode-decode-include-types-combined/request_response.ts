// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.3
// source: request_response.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

export interface Request {
  requestId: string;
  nested: Request_Nested | undefined;
}

export interface Request_Nested {
  moreData: string;
}

export interface Response {
  responseId: string;
}

function createBaseRequest(): Request {
  return { requestId: "", nested: undefined };
}

export const Request = {
  encode(message: Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.nested !== undefined) {
      Request_Nested.encode(message.nested, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
};

function createBaseRequest_Nested(): Request_Nested {
  return { moreData: "" };
}

export const Request_Nested = {
  encode(message: Request_Nested, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.moreData !== "") {
      writer.uint32(10).string(message.moreData);
    }
    return writer;
  },
};

function createBaseResponse(): Response {
  return { responseId: "" };
}

export const Response = {
  decode(input: _m0.Reader | Uint8Array, length?: number): Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.responseId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
};
